# -*- coding: utf-8 -*-
"""Triplet_Loss_Tech_Bubble.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1De4zsXFY-1zhMIzpD6VT11KdYgPAD3iz
"""

! pip install tensorflow_addons
import io
import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa
import sklearn.decomposition

from keras.datasets import mnist
from keras.utils import np_utils
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

# load data
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# reshape to be [samples][width][height][channels]
X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')

# normalize inputs from 0-255 to 0-1
X_train = X_train / 255
X_test = X_test / 255

train_data = tf.data.Dataset.zip(tf.data.Dataset.from_tensor_slices(X_train))
train_labels = tf.data.Dataset.zip(tf.data.Dataset.from_tensor_slices(y_train))

test_data = tf.data.Dataset.zip(tf.data.Dataset.from_tensor_slices(X_test))
test_labels = tf.data.Dataset.zip(tf.data.Dataset.from_tensor_slices(y_test))

train_dataset =  tf.data.Dataset.zip((train_data, train_labels)).batch(32)
test_dataset =  tf.data.Dataset.zip((test_data, test_labels)).batch(32)

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(8, activation=None),
    tf.keras.layers.Lambda(lambda x: tf.math.l2_normalize(x, axis=1)) # L2 normalize embeddings
])

# Compile the model
model.compile(
    optimizer=tf.keras.optimizers.Adam(0.001),
    loss=tfa.losses.TripletSemiHardLoss()
    )

# Train the network
model.fit(
    train_dataset,
    epochs=0
    )

results = model.predict(test_dataset)

tsne = TSNE(n_components=2, random_state=123)
embeddings = tsne.fit_transform(results) 

plt.figure(figsize=(12, 12))
sns.scatterplot(x=embeddings[:,0], y=embeddings[:,1],hue=y_test,palette='bright')

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(filters=128, kernel_size=2, padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=2),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Conv2D(filters=64, kernel_size=2, padding='same', activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=2),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(8, activation=None), # No activation on final dense layer
    tf.keras.layers.Lambda(lambda x: tf.math.l2_normalize(x, axis=1)) # L2 normalize embeddings
])

# Compile the model
model.compile(
    optimizer=tf.keras.optimizers.Adam(0.001),
    loss=tfa.losses.TripletSemiHardLoss()
    )

# Train the network
model.fit(
    train_dataset,
    epochs=25
    )

# Evaluate the network
results = model.predict(test_dataset)

tsne = TSNE(n_components=2, random_state=123)
embeddings = tsne.fit_transform(results) 

plt.figure(figsize=(12, 12))
sns.scatterplot(x=embeddings[:,0], y=embeddings[:,1],hue=y_test,palette='bright')